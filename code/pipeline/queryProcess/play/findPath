#!/bin/bash
#PBS -N playPath
#PBS -l select=1:ncpus=16:mem=60gb,walltime=72:00:00

EXP_NAME=play
ELIPSE=1.4
SOURCE_LBL="htr1a"
TARGET_LBL="venlafaxine"

module load gcc python openmpi

# Place us in the working directory
if [ -z "$PBS_O_WORKDIR" ]; then
  echo "Running from $PWD"
else
  echo "Moving to $PBS_O_WORKDIR"
  cd $PBS_O_WORKDIR
fi

# Identify the project home dir
if [ -z "$PROJ_HOME" ]; then
  echo "Searching for moliere home directory"
  PROJ_HOME=$(pwd | grep -o .*moliere)
  if [ "$PROJ_HOME" = "" ]; then
    echo "Failed to find project home"
    exit 1
  else
    echo "Found $PROJ_HOME"
  fi
fi

# add project tools to path
PATH=$PATH:$PROJ_HOME/code/components/links

DATA=$PROJ_HOME/data
NET=$DATA/network
VECS=$DATA/fastText
RES=$PROJ_HOME/results/$EXP_NAME
mkdir -p $RES

EDGES=$NET/final.bin.edges
LABELS=$NET/final.labels

NGRAM_VEC=$VECS/canon.vec
#PMID_VEC=$VECS/centroids.data
PMID_VEC=$(mktemp)  # just give it nothing
UMLS_VEC=$VECS/umls.data

OUT=$RES/$SOURCE_LBL---$TARGET_LBL.path

echo "Searching for $SOURCE_LBL and $TARGET_LBL in $LABELS"
T1=$(mktemp)
T2=$(mktemp)
grep -nwm1 $SOURCE_LBL $LABELS | awk 'BEGIN{FS=":"}{print $1-1}' > "$T1" &
grep -nwm1 $TARGET_LBL $LABELS | awk 'BEGIN{FS=":"}{print $1-1}' > "$T2" &
wait
SOURCE_IDX=$(cat $T1)
TARGET_IDX=$(cat $T2)
rm -f $T1 $T2

if [ -z "$SOURCE_IDX" ]; then
  echo "FAILED TO FIND $SOURCE_LBL"
  exit 1
fi

if [ -z "$TARGET_IDX" ]; then
  echo "FAILED TO FIND $TARGET_LBL"
  exit 1
fi


echo "findPath -g $EDGES -l $LABELS -s $SOURCE_IDX -t $TARGET_IDX -V $NGRAM_VEC -P $PMID_VEC -U $UMLS_VEC -e $ELIPSE -o $OUT"

findPath -g $EDGES \
         -l $LABELS \
         -s $SOURCE_IDX \
         -t $TARGET_IDX \
         -V $NGRAM_VEC \
         -P $PMID_VEC \
         -U $UMLS_VEC \
         -e $ELIPSE \
         -o $OUT \
         -v


#usage: ./findPath --graphFile=string --sourceIdx=unsigned int --outputFile=string --ngramVectors=string --pmidCentroids=string --umlsCentroids=string --labelFile=string --elipseConst=float [options] ...
#options:
  #-g, --graphFile        input graph file (string)
  #-s, --sourceIdx        id representing the source (unsigned int)
  #-t, --targetIdx        intended target (unsigned int [=4294967295])
  #-o, --outputFile       Output paths and neighborhoods (string)
  #-V, --ngramVectors     File contanining text vectors for ngrams (string)
  #-P, --pmidCentroids    File containing text vectors for PMIDs (string)
  #-U, --umlsCentroids    File containing text vectors for UMLS terms (string)
  #-l, --labelFile        Label file accompanying the edges file. (string)
  #-e, --elipseConst      Constant alpha where dist(A,B)*\alpha = 2a (float)
  #-v, --verbose          outputs debug information
  #-?, --help             print this message
